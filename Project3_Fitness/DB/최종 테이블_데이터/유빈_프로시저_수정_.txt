create or replace PACKAGE BODY PKG_SUB AS

   PROCEDURE PROC_SUBJECT_LIST(
    O_CUR   OUT     SYS_REFCURSOR
  ) AS
  
   BEGIN
    OPEN    O_CUR   FOR
    SELECT LID, LNAME, TNAME, PID
      , DECODE(RNAME, NULL, ' ', RNAME) AS RNAME
      , PCOST, DCNT, LCNT, GRNAME
      , DECODE(DDAY, NULL, ' ', DDAY) AS DDAY
      , DECODE(DTIME, NULL, ' ',DTIME) AS DTIME 
    FROM
    (
        SELECT  T1.LID, T1.LNAME, T2.TNAME
                , T3.RNAME , T1.PID, T4.PCOST, T10.DCNT, T4.PTOT
                , NVL(T9.LCNT, 0) AS LCNT
                , T7.GRNAME, T8.DDAY, T8.DTIME
        FROM    LECTURES T1, TRAINERS T2, CLASSROOM T3
                , PRODUCTS T4, COMMONS T5, COMMONS T6, GRP T7, DLECTURES T8
                , ( SELECT   LID, COUNT(LID) AS LCNT 
                    FROM     LSALES
                    GROUP BY LID
                    ORDER BY LID ) T9
                , ( SELECT   LID, COUNT(LID) AS DCNT
                    FROM     DLECTURES
                    GROUP BY LID
                    ORDER BY LID ) T10
        WHERE   T1.TID = T2.TID
        AND     T1.RID = T3.RID(+)
        AND     T1.PID = T4.PID
        AND     T4.CID = T5.CID
        AND     T5.CPARENT_ID = T6.CID
        AND     T5.GRID = T7.GRID
        AND     T1.LID  = T8.LID
        AND     T1.PID  = T8.PID
        AND     T1.LID  = T9.LID(+)
        AND     T1.LID  = T10.LID
        ORDER BY LID ASC, DDAY DESC
    )
    WHERE PTOT > LCNT
    ;
  END PROC_SUBJECT_LIST;

  PROCEDURE PROC_SUBJECT_SEARCH(
    IN_NUM     VARCHAR2,
    IN_KEYWORD VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
  ) AS
  BEGIN
  IF IN_NUM = '0' THEN PROC_SUBJECT_LIST(O_CUR);
  
  ELSIF IN_NUM = '1' THEN -- 수업명 검색
    OPEN O_CUR FOR
    SELECT LID, LNAME, TNAME, PID
      , DECODE(RNAME, NULL, ' ', RNAME) AS RNAME
      , PCOST, DCNT, LCNT, GRNAME
      , DECODE(DDAY, NULL, ' ', DDAY) AS DDAY
      , DECODE(DTIME, NULL, ' ',DTIME) AS DTIME 
    FROM
    (
        SELECT  T1.LID, T1.LNAME, T2.TNAME
                , T3.RNAME , T1.PID , T4.PCOST, T10.DCNT, T4.PTOT
                , NVL(T9.LCNT, 0) AS LCNT
                , T7.GRNAME, T8.DDAY, T8.DTIME
        FROM    LECTURES T1, TRAINERS T2, CLASSROOM T3
                , PRODUCTS T4, COMMONS T5, COMMONS T6, GRP T7, DLECTURES T8
                , ( SELECT   LID, COUNT(LID) AS LCNT 
                    FROM     LSALES
                    GROUP BY LID
                    ORDER BY LID ) T9
                , ( SELECT   LID, COUNT(LID) AS DCNT
                    FROM     DLECTURES
                    GROUP BY LID
                    ORDER BY LID ) T10
        WHERE   T1.TID = T2.TID
        AND     T1.RID = T3.RID(+)
        AND     T1.PID = T4.PID
        AND     T4.CID = T5.CID
        AND     T5.CPARENT_ID = T6.CID
        AND     T5.GRID = T7.GRID
        AND     T1.LID  = T8.LID
        AND     T1.PID  = T8.PID
        AND     T1.LID  = T9.LID(+)
        AND     T1.LID  = T10.LID
        AND     LNAME   LIKE '%' || IN_KEYWORD || '%'
        ORDER BY LID ASC, DDAY DESC
    )
    WHERE PTOT > LCNT
    ;
    
  ELSIF IN_NUM = '2' THEN -- 강사명 검색
        OPEN O_CUR FOR
        SELECT LID, LNAME, TNAME, PID
              , DECODE(RNAME, NULL, ' ', RNAME) AS RNAME
              , PCOST, DCNT, LCNT, GRNAME
              , DECODE(DDAY, NULL, ' ', DDAY) AS DDAY
              , DECODE(DTIME, NULL, ' ',DTIME) AS DTIME 
        FROM
        (
            SELECT  T1.LID, T1.LNAME, T2.TNAME
                    , T3.RNAME , T1.PID , T4.PCOST, T10.DCNT, T4.PTOT
                    , NVL(T9.LCNT, 0) AS LCNT
                    , T7.GRNAME, T8.DDAY, T8.DTIME
            FROM    LECTURES T1, TRAINERS T2, CLASSROOM T3
                    , PRODUCTS T4, COMMONS T5, COMMONS T6, GRP T7, DLECTURES T8
                    , ( SELECT   LID, COUNT(LID) AS LCNT 
                        FROM     LSALES
                        GROUP BY LID
                        ORDER BY LID ) T9
                    , ( SELECT   LID, COUNT(LID) AS DCNT
                        FROM     DLECTURES
                        GROUP BY LID
                        ORDER BY LID ) T10
            WHERE   T1.TID = T2.TID
            AND     T1.RID = T3.RID(+)
            AND     T1.PID = T4.PID
            AND     T4.CID = T5.CID
            AND     T5.CPARENT_ID = T6.CID
            AND     T5.GRID = T7.GRID
            AND     T1.LID  = T8.LID
            AND     T1.PID  = T8.PID
            AND     T1.LID  = T9.LID(+)
            AND     T1.LID  = T10.LID
            AND     TNAME   LIKE '%' || IN_KEYWORD || '%'
            ORDER BY LID ASC, DDAY DESC
        )
        WHERE PTOT > LCNT
        ;
    END IF;
  END PROC_SUBJECT_SEARCH;

  PROCEDURE PROC_SUBJECT_FILTER(
    IN_GRID             VARCHAR2,
    O_CUR       OUT     SYS_REFCURSOR
  ) AS
  BEGIN
  IF IN_GRID = '' THEN
    PROC_SUBJECT_LIST(O_CUR);
  ELSE
    OPEN O_CUR FOR
    SELECT LID, LNAME, TNAME, PID
          , DECODE(RNAME, NULL, ' ', RNAME) AS RNAME
          , PCOST, DCNT, LCNT, GRNAME
          , DECODE(DDAY, NULL, ' ', DDAY) AS DDAY
          , DECODE(DTIME, NULL, ' ',DTIME) AS DTIME 
    FROM
    (
        SELECT  T1.LID, T1.LNAME, T2.TNAME
                , T3.RNAME , T1.PID , T4.PCOST, T10.DCNT, T4.PTOT
                , NVL(T9.LCNT, 0) AS LCNT
                , T7.GRNAME, T8.DDAY, T8.DTIME
        FROM    LECTURES T1, TRAINERS T2, CLASSROOM T3
                , PRODUCTS T4, COMMONS T5, COMMONS T6, GRP T7, DLECTURES T8
                , ( SELECT   LID, COUNT(LID) AS LCNT 
                    FROM     LSALES
                    GROUP BY LID
                    ORDER BY LID ) T9
                , ( SELECT   LID, COUNT(LID) AS DCNT
                    FROM     DLECTURES
                    GROUP BY LID
                    ORDER BY LID ) T10
        WHERE   T1.TID = T2.TID
        AND     T1.RID = T3.RID(+)
        AND     T1.PID = T4.PID
        AND     T4.CID = T5.CID
        AND     T5.CPARENT_ID = T6.CID
        AND     T5.GRID = T7.GRID
        AND     T1.LID  = T8.LID
        AND     T1.PID  = T8.PID
        AND     T1.LID  = T9.LID(+)
        AND     T1.LID  = T10.LID
        AND     T5.GRID LIKE '%' || IN_GRID || '%'
        ORDER BY LID ASC, DDAY DESC
    )
    WHERE PTOT > LCNT
    ;
   END IF;
  END PROC_SUBJECT_FILTER;
  
  PROCEDURE PROC_FILTER_LIST(
    O_CUR     OUT   SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT T3.GRID, T3.GRNAME
    FROM LECTURES T1, PRODUCTS T2, (
        SELECT T1.CID, T1.GRID, T3.GRNAME
        FROM COMMONS T1, COMMONS T2, GRP T3
        WHERE T1.CPARENT_ID = T2.CID
        AND T1.GRID = T3.GRID
    ) T3
    WHERE T1.PID = T2.PID
    AND T2.CID = T3.CID
    GROUP BY T3.GRID, T3.GRNAME
    ORDER BY T3.GRID
    ;
  END PROC_FILTER_LIST;
  
  PROCEDURE PROC_SUBJECT_INSERT(
    IN_LID      VARCHAR2,
    IN_MID      VARCHAR2,
    O_ERR_CODE  OUT     VARCHAR2,
    O_ERR_MSG   OUT     VARCHAR2
  ) AS
  
    ERR_NO_TICKET   EXCEPTION;
    ERR_OVER_CNT    EXCEPTION;
    ERR_OVER_TIME   EXCEPTION;
    ERR_MORE_REG    EXCEPTION;
    ERR_CHEK_SCHEDULE   EXCEPTION;
  
    V_PID       VARCHAR(7);     -- 상품 아이디 담을 것
    V_STAND     VARCHAR2(20);   -- DAY / MONTH 
    
    V_CHECK     VARCHAR2(10);   -- 사용자가 해당 수업에 대한 이용권이 있는지 체크
    
    V_OEXP      DATE;           -- 만료일 담을 변수
    V_OCNT      NUMBER(5);      -- DAY 상품 신청할 때 횟수 담을 변수
    V_PCNT      NUMBER(5);      -- 해당 상품이 몇 회권인지, 몇 개월권인지의 내용 담음
  
    V_NEXT_OCNT NUMBER(5);      -- 수업 신청 후 +1 된 후의 OCNT 담는 변수
    
    V_DAY_CK    VARCHAR(20);    -- 겹치는 날있는지 확인
    V_TIME_CK   VARCHAR(20);    -- 겹치는 시간 있는지 확인
  BEGIN    
  
    -- 해당 수업 LID 를 가지고 DAY권인지 확인 
    SELECT PID, CSTAND INTO V_PID, V_STAND
    FROM
    (
    SELECT T1.LID,T1.LNAME,T1.RID,T1.TID,T2.PID,T2.PNAME,T2.PCOST,T2.PTOT,T2.CID,T3.GRID,T3.CNAME, T3.CSTAND 
    FROM LECTURES T1, PRODUCTS T2, ( 
        SELECT T1.CID, T1.GRID, T1.CNAME, T2.CNAME AS CSTAND
        FROM COMMONS T1, COMMONS T2
        WHERE T1.CPARENT_ID = T2.CID
    )T3
    WHERE T1.PID = T2.PID 
    AND T2.CID = T3.CID
    AND T1.LID = IN_LID
    ORDER BY PID
    )
    ;
    
    -- 만약 해당 사용자가 신청한 수업에 대해 이용권이 없을 경우 예외 처리
    SELECT MAX(ORID)
    INTO V_CHECK
    FROM ORDERS
    WHERE PID = V_PID
    AND MID = IN_MID;
    
    IF V_CHECK IS NULL THEN
        RAISE ERR_NO_TICKET;
    END IF;
    
    -- 같은 요일 / 같은 시간에 수업이 있다면 예외처리로 신청 못하게
    
            SELECT MAX(B.DDAY), MAX(B.DTIME)
            INTO V_DAY_CK, V_TIME_CK
            FROM 
            (
                SELECT  DDAY, DTIME
                FROM    LSALES T1, LECTURES T2, PRODUCTS T3, DLECTURES T4
                WHERE   T1.LID = T2.LID
                AND     T2.PID = T3.PID
                AND     T2.LID = T4.LID
                AND     T2.PID = T4.PID
                AND     MID = IN_MID
                ORDER BY T4.LID ASC, DDAY DESC
            ) A,
            (
                SELECT  DDAY, DTIME
                FROM    LECTURES T1, DLECTURES T2
                WHERE   T1.LID = IN_LID --L022
                AND     T1.LID = T2.LID
                AND     T1.PID = T2.PID
            )B
            WHERE   A.DDAY = B.DDAY(+)
            AND     A.DTIME = B.DTIME(+)
            ;
    
    -- 만료일이 남은 이용권 또는 만료일이 지정되지 않은(PT용) 이용권 조회
    -- 입력받은 수업아이디로 찾은 상품아이디와 신청인 아이디로 
    -- 해당 사용자가 동일한 상품에 대해 적절한 이용권을 가지고 있는지 조회
    -- 만료일, 신청 횟수, 상품권 제공 횟수 데이터 가져옴 
    -- ( 이용권 등록 날짜가 빠른 순으로 사용되도록 할 것 )
    
    IF V_STAND = 'DAY' THEN -- DAY권인 경우
    SELECT OEXP, OCNT, TO_NUMBER(PCNT)AS PCNT
    INTO V_OEXP, V_OCNT, V_PCNT
    FROM
    (
        SELECT T1.ORID, T1.PID, T1.MID, T1.SDATE
            , T1.OEXP, T1.OCNT, T2.PNAME, T3.CNAME AS PCNT,T4.CNAME AS PARNAME 
        FROM    ORDERS T1, PRODUCTS T2, COMMONS T3, COMMONS T4
        WHERE   T1.PID = T2.PID
        AND     T2.CID = T3.CID
        AND     T3.CPARENT_ID = T4.CID
        AND     T2.PID = V_PID AND T1.MID = IN_MID -- V_PID / IN_MID
        AND     ( OCNT = 0 OR OEXP IS NULL )
        AND     ORID = ( 
                    SELECT MIN(ORID)
                    FROM ORDERS
                    WHERE PID = V_PID AND MID = IN_MID
                    AND ( OCNT = 0 OR OEXP IS NULL) )   
                    )
        ;   -- ORDER 테이블에서 해당 수업의 상품으로 결제한 권의 OCNT를 확인
        
            -- 일정같으면 예외처리, 아니면 진행
            IF V_DAY_CK IS NOT NULL AND V_TIME_CK IS NOT NULL 
            THEN   RAISE ERR_CHEK_SCHEDULE;  
            END IF;            
            
            IF V_OCNT < V_PCNT THEN

            -- 수업 신청 내역 테이블에 INSERT
            INSERT INTO LSALES (LSID, LID, MID, LSDATE)

            VALUES ( (SELECT 'LS' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(LSID), 'LS000'), 3, 3))+1, '000')) FROM LSALES),
                    IN_LID, IN_MID, SYSDATE );
        
            -- OCNT에 +1 
            UPDATE  ORDERS
            SET     OCNT = OCNT + 1
            WHERE   PID = V_PID
            AND     MID = IN_MID
            ;
            COMMIT;

            SELECT  OCNT INTO V_NEXT_OCNT
            FROM    ORDERS
            WHERE   PID = V_PID
            AND     MID = IN_MID;

            -- 입력한 후 OCNT가 총 개수와 같아지면 만료일 적어주기.
            IF V_NEXT_OCNT = V_PCNT THEN
                UPDATE  ORDERS
                SET     OEXP = SYSDATE
                WHERE   PID = V_PID
                AND     MID = IN_MID
                ;
            END IF;

        ELSIF V_OCNT = V_PCNT THEN -- 총 개수와 같으면 EXCEPTION
            RAISE ERR_OVER_CNT;            
        END IF;    
        
    ELSIF V_STAND = 'MONTH' THEN   
    SELECT OEXP, OCNT, TO_NUMBER(PCNT)AS PCNT
    INTO V_OEXP, V_OCNT, V_PCNT
    FROM(
        SELECT  T1.ORID, T1.PID, T1.MID, T1.SDATE, T1.OEXP, T1.OCNT,
            T2.PNAME, T3.CNAME AS PCNT, T4.CNAME AS PARNAME
        FROM    ORDERS T1, PRODUCTS T2, COMMONS T3, COMMONS T4
        WHERE   T1.PID = T2.PID
        AND     T2.CID = T3.CID
        AND     T3.CPARENT_ID = T4.CID
        AND     T2.PID = V_PID AND T1.MID = IN_MID -- V_PID / IN_MID
        AND     ( OCNT = 0 OR OEXP > (SELECT SYSDATE FROM DUAL))
        AND     ORID = ( 
                    SELECT MIN(ORID)
                    FROM ORDERS
                    WHERE PID = V_PID AND MID = IN_MID
                    AND (  OCNT = 0 OR OEXP > (SELECT SYSDATE FROM DUAL))
                )
        );   
        
         -- 일정같으면 예외처리, 아니면 진행
            IF V_DAY_CK IS NOT NULL AND V_TIME_CK IS NOT NULL 
            THEN   RAISE ERR_CHEK_SCHEDULE;  
            END IF;   
        
        IF V_OCNT = 0 THEN
            IF V_OEXP > SYSDATE THEN

                 -- 수업 신청 내역 테이블에 INSERT
                INSERT INTO LSALES (LSID, LID, MID, LSDATE)
                VALUES ( (SELECT 'LS' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(LSID), 'LS000'), 3, 3) + 1), '000')) FROM LSALES),
                        IN_LID, IN_MID, SYSDATE );
                UPDATE  ORDERS
                SET     OCNT = OCNT + 1
                WHERE   PID = V_PID
                AND     MID = IN_MID
                ;        
            ELSE
                RAISE ERR_OVER_TIME;
            END IF;
        ELSE 
            RAISE ERR_MORE_REG;
        END IF;
    END IF;    
    
    
    EXCEPTION
        WHEN ERR_NO_TICKET THEN
            O_ERR_CODE  := 'ERR0001';
            O_ERR_MSG   := '해당 수업을 신청가능한 이용권이 없습니다.';
        WHEN ERR_OVER_CNT THEN
            O_ERR_CODE  := 'ERR0002';
            O_ERR_MSG   := '이용가능한 횟수가 부족합니다.';
        WHEN ERR_OVER_TIME THEN
            O_ERR_CODE  := 'ERR0003';
            O_ERR_MSG   := '기간이 만료되었습니다.';
        WHEN ERR_MORE_REG THEN
            O_ERR_CODE  := 'ERR004';
            O_ERR_MSG   := '해당 이용권은 이미 사용되었습니다';
            -- 개월 권의 경우에는 신청 횟수가 최대 1번이기 때문에 추가
        WHEN ERR_CHEK_SCHEDULE THEN
            O_ERR_CODE  := 'ERR005';
            O_ERR_MSG   := '수업의 일정이 겹칩니다.';
        WHEN OTHERS THEN
            O_ERR_CODE  := 'ERR0099';
            O_ERR_MSG   := '' || SQLERRM;

  END PROC_SUBJECT_INSERT;



END PKG_SUB;







-========================


create or replace PACKAGE BODY PKG_TICKET AS

  PROCEDURE PROC_GRLIST(
    O_CUR   OUT     SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT GRID, GRNAME
    FROM GRP
    ;
  END PROC_GRLIST;

  PROCEDURE PROC_CLASSLIST(
    IN_GRID     VARCHAR2,
    O_CUR   OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT  T1.PNAME
    FROM    PRODUCTS T1, COMMONS T2, GRP T3
    WHERE   T1.CID = T2.CID
    AND     T2.GRID = T3.GRID
    AND     T3.GRID LIKE '%' || IN_GRID || '%'
    GROUP BY T1.PNAME
    ;
  END PROC_CLASSLIST;

  PROCEDURE PROC_TERMLIST(
    IN_PNAME    VARCHAR2,
    O_CUR   OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT  T2.CNAME AS TERM
    FROM    PRODUCTS T1, COMMONS T2, COMMONS T3
    WHERE   T1.CID = T2.CID
    AND     T2.CPARENT_ID = T3.CID
    AND     T1.PNAME LIKE '%' || IN_PNAME || '%'
    ;
  END PROC_TERMLIST;

  PROCEDURE PROC_TICKETLIST(
    IN_GRID     VARCHAR2,
    IN_PNAME    VARCHAR2,
    IN_TERM     VARCHAR2,
    O_CUR   OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT  T4.GRID, T4.GRNAME, T1.PID, T1.PNAME, T2.CNAME AS TERMS, T3.CNAME AS GUBUN, T1.PCOST
        , DECODE( T1.PTOT, NULL, '제한 없음', T1.PTOT ) AS PTOT
    FROM    PRODUCTS T1, COMMONS T2, COMMONS T3, GRP T4
    WHERE   T1.CID = T2.CID
    AND     T2.CPARENT_ID = T3.CID
    AND     T3.GRID = T4.GRID
    AND     T4.GRID LIKE '%' || IN_GRID || '%'
    AND     T1.PNAME LIKE '%' || IN_PNAME || '%'
    AND     T2.CNAME LIKE '%' || IN_TERM || '%'
    ;
  END PROC_TICKETLIST;

  PROCEDURE PROC_TICKET_CHARGE(
    IN_PID      VARCHAR2,
    IN_MID      VARCHAR2
  ) AS
    
    V_TERM  VARCHAR2(20);
    V_GUBUN VARCHAR2(20);
    
  BEGIN
  
  -- 해당 상품이 DAY인지 / MONTH 인지
    SELECT  T2.CNAME AS TERM , T3.CNAME AS GUBUN
            INTO V_TERM, V_GUBUN
    FROM    PRODUCTS T1, COMMONS T2, COMMONS T3, GRP T4
    WHERE   T1.CID = T2.CID
    AND     T2.CPARENT_ID = T3.CID
    AND     T2.GRID = T4.GRID
    AND     T1.PID  = IN_PID
    ;
    
    IF V_GUBUN = 'DAY' THEN
        INSERT INTO ORDERS (ORID, PID, MID, SDATE, OEXP, OCNT)
        VALUES(
            (
                SELECT 'OR' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(ORID), 'OR000'), 3) + 1), '000')) AS ORID
                FROM ORDERS
            ), IN_PID, IN_MID, SYSDATE, NULL, 0 
        );
    ELSIF V_GUBUN = 'MONTH' THEN
        INSERT INTO ORDERS
        VALUES(
            (
                SELECT 'OR' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(ORID), 'OR000'), 3) + 1), '000')) AS ORID
                FROM ORDERS
            )
            , IN_PID, IN_MID, SYSDATE
            , TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, TO_NUMBER(V_TERM)), 'YYYY/MM/DD')) , 0 
        );
    END IF;
  END PROC_TICKET_CHARGE;

END PKG_TICKET;